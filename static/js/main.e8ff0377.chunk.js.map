{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","username","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAXF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,MCQGK,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OACE,kBAAC,EAAD,CACEC,IAAKL,EAAOI,GAAGT,GACfA,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIvB,OAAO,6BAAMO,ICEAK,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGHI,EAVA,SAACC,GACd,OACE,yBACEC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAE/DJ,EAAMK,WCPAlB,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,gBACN0B,SAAU,OACVzB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACN0B,SAAU,YACVzB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACN0B,SAAU,WACVzB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACN0B,SAAU,WACVzB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACN0B,SAAU,SACVzB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACN0B,SAAU,mBACVzB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACN0B,SAAU,eACVzB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACN0B,SAAU,gBACVzB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACN0B,SAAU,WACVzB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACN0B,SAAU,iBACVzB,MAAO,2BCXI0B,G,wDAzCb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAd1C,EAAKC,MAAQ,CACX1B,OAAQ,GACRO,YAAa,IAJH,E,gEAOO,IAAD,OAClBoB,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKR,SAAS,CAAEvB,OAAQ+B,S,+BAOpB,IAAD,OACDC,EAAeC,KAAKP,MAAM1B,OAAOkC,QAAO,SAAClC,GAC7C,OAAOA,EAAOP,KACX0C,cACAC,SAAS,EAAKV,MAAMnB,YAAY4B,kBAGrC,OAAQnC,EAAOqC,OAGb,yBAAKzC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CACEW,YAAa0B,KAAKP,MAAMnB,YACxBC,aAAcyB,KAAKZ,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUrB,OAAQgC,MATtB,6C,GA3BYM,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e8ff0377.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n  const cardComponent = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={robots[i].id}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: \"Leanne Graham\",\r\n    username: \"Bret\",\r\n    email: \"Sincere@april.biz\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Ervin Howell\",\r\n    username: \"Antonette\",\r\n    email: \"Shanna@melissa.tv\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Clementine Bauch\",\r\n    username: \"Samantha\",\r\n    email: \"Nathan@yesenia.net\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"Patricia Lebsack\",\r\n    username: \"Karianne\",\r\n    email: \"Julianne.OConner@kory.org\",\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Chelsey Dietrich\",\r\n    username: \"Kamren\",\r\n    email: \"Lucio_Hettinger@annie.ca\",\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"Mrs. Dennis Schulist\",\r\n    username: \"Leopoldo_Corkery\",\r\n    email: \"Karley_Dach@jasper.info\",\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"Kurtis Weissnat\",\r\n    username: \"Elwyn.Skiles\",\r\n    email: \"Telly.Hoeger@billy.biz\",\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"Nicholas Runolfsdottir V\",\r\n    username: \"Maxime_Nienow\",\r\n    email: \"Sherwood@rosamond.me\",\r\n  },\r\n  {\r\n    id: 9,\r\n    name: \"Glenna Reichert\",\r\n    username: \"Delphine\",\r\n    email: \"Chaim_McDermott@dana.io\",\r\n  },\r\n  {\r\n    id: 10,\r\n    name: \"Clementina DuBuque\",\r\n    username: \"Moriah.Stanton\",\r\n    email: \"Rey.Padberg@karina.biz\",\r\n  },\r\n];\r\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport { robots } from \"../robots\";\nimport \"./App.css\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n  render() {\n    const filterRobots = this.state.robots.filter((robots) => {\n      return robots.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    });\n\n    return !robots.length ? (\n      <h1>Loading..</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox\n          searchfield={this.state.searchfield}\n          searchChange={this.onSearchChange}\n        />\n        <Scroll>\n          <CardList robots={filterRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}